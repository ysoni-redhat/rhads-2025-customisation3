---
- name: Ensure python3.11 and venv are installed
  package:
    name:
      - python3.11
      - python3.11-venv
    state: present

- name: Create Ansible venv if not exists
  command: python3.11 -m venv /opt/ansible-venv
  args:
    creates: /opt/ansible-venv/bin/activate

- name: Upgrade pip inside venv
  command: /opt/ansible-venv/bin/pip install --upgrade pip

- name: Install Python dependencies in venv
  command: /opt/ansible-venv/bin/pip install openshift kubernetes jmespath

- name: Download ArgoCD CLI binary
  get_url:
    url: "https://github.com/argoproj/argo-cd/releases/download/{{ argocd_version }}/argocd-linux-amd64"
    dest: /usr/local/bin/argocd
    mode: '0755'

- name: Gather Keycloak PVCs
  command: >
    oc get pvc -n {{ namespace }} -l postgres-operator.crunchydata.com/cluster=keycloak -o json
  register: keycloak_pvcs_raw

- name: Set fact with parsed PVCs
  set_fact:
    keycloak_pvcs: "{{ (keycloak_pvcs_raw.stdout | from_json)['items'] }}"

- name: Patch all Keycloak PVCs to increase storage
  command: >
    oc patch pvc {{ item.metadata.name }}
    -n {{ namespace }}
    --type=merge
    -p '{"spec": {"resources": {"requests": {"storage": "{{ new_size }}"}}}}'
  loop: "{{ keycloak_pvcs }}"
  loop_control:
    label: "{{ item.metadata.name }}"

- name: Wait for PVC resize to reflect
  shell: >
    oc get pvc {{ item.metadata.name }} -n {{ namespace }} -o json | jq -r '.status.capacity.storage'
  register: pvc_capacity
  until: pvc_capacity.stdout == new_size
  retries: 15
  delay: 10
  loop: "{{ keycloak_pvcs }}"
  loop_control:
    label: "{{ item.metadata.name }}"

- name: Gather Keycloak pods
  command: >
    oc get pods -n {{ namespace }} -l postgres-operator.crunchydata.com/cluster=keycloak -o json
  register: keycloak_pods_raw

- name: Set fact with parsed pods
  set_fact:
    keycloak_pods: "{{ (keycloak_pods_raw.stdout | from_json)['items'] }}"

- name: Delete Keycloak pods to pick up new PVC size
  command: >
    oc delete pod {{ item.metadata.name }} -n {{ namespace }}
  loop: "{{ keycloak_pods }}"
  loop_control:
    label: "{{ item.metadata.name }}"

- name: Wait for pods to be running again
  shell: >
    oc get pod {{ item.metadata.name }} -n {{ namespace }} -o json | jq -r '.status.phase'
  register: pod_status
  until: pod_status.stdout == "Running"
  retries: 20
  delay: 15
  loop: "{{ keycloak_pods }}"
  loop_control:
    label: "{{ item.metadata.name }}"

- name: Show final PVC and pod status
  block:
    - name: PVC status
      command: oc get pvc -n {{ namespace }}

    - name: Pods status
      command: oc get pods -n {{ namespace }}

- name: Patch the OpenShift Console resource to set logoutRedirect
  command: >
    oc patch console cluster
    --type=merge
    -p '{"spec": {"authentication": {"logoutRedirect": "{{ logout_redirect_url }}"}}}'
  register: patch_result

- name: Show patch result
  debug:
    var: patch_result.stdout

- name: Apply KeycloakRealmImport custom resource
  copy:
    dest: /tmp/keycloak_realm_import.yaml
    content: |
      apiVersion: k8s.keycloak.org/v2alpha1
      kind: KeycloakRealmImport
      metadata:
        name: trusted-artifact-signer
        namespace: tssc-keycloak
      spec:
        keycloakCRName: keycloak
        realm:
          id: trusted-artifact-signer
          realm: trusted-artifact-signer
          displayName: "Trusted Artifact Signer"
          enabled: true
          clients:
            - clientId: ocp4_workload_advanced_developer_suite_openshift_keycloak_client_id
              enabled: true
              protocol: openid-connect
              redirectUris:
                - "{{ ocp_console_url }}/*"
              attributes:
                post.logout.redirect.uris: "{{ ocp_console_url }}"

- name: Apply KeycloakRealmImport using oc
  command: >
    oc apply -f /tmp/keycloak_realm_import.yaml

- name: Debug kubeconfig path
  debug:
    msg: "{{ kubeconfig_path }}"

- name: Create dynamic-plugins-npmrc Secret in OpenShift
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: dynamic-plugins-npmrc
        namespace: tssc-dh
      type: Opaque
      data:
        .npmrc: "{{ '@redhat:registry=https://npm.registry.redhat.com' | b64encode }}"

- name: Get cluster ArgoCD route from openshift-gitops namespace
  shell: >
    oc -n openshift-gitops get route openshift-gitops-server -o jsonpath='{.spec.host}'
  register: cluster_argo_route
  changed_when: false

- name: Set cluster ArgoCD URL fact
  set_fact:
    cluster_argo_url: "https://{{ cluster_argo_route.stdout }}"

- name: Retrieve cluster ArgoCD credentials from openshift-gitops namespace
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: openshift-gitops-cluster
    namespace: "openshift-gitops"
  register: r_cluster_argo_credentials
  retries: 120
  delay: 10
  until:
    - r_cluster_argo_credentials is defined
    - r_cluster_argo_credentials.resources is defined
    - r_cluster_argo_credentials.resources | length > 0

- name: Set cluster ArgoCD admin password fact
  set_fact:
    cluster_argo_password: "{{ r_cluster_argo_credentials.resources[0].data['admin.password'] | b64decode }}"

- name: Get current tssc-developer-hub-env Secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: tssc-developer-hub-env
    namespace: tssc-dh
  register: current_dh_env_secret

- name: Patch tssc-developer-hub-env Secret with cluster ArgoCD environment variables
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: tssc-developer-hub-env
        namespace: tssc-dh
      type: Opaque
      data: >-
        {{
          current_dh_env_secret.resources[0].data | combine({
            'CLUSTER_ARGOCD_URL': cluster_argo_url | b64encode,
            'CLUSTER_ARGOCD_PASSWORD': cluster_argo_password | b64encode
          })
        }}

- name: Get current tssc-developer-hub-app-config ConfigMap
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: tssc-developer-hub-app-config
    namespace: tssc-dh
  register: current_app_config

- name: Parse current app-config.yaml content
  set_fact:
    app_config_yaml: "{{ current_app_config.resources[0].data['app-config.tssc.yaml'] | from_yaml }}"

- name: Add cluster ArgoCD instance to argocd.appLocatorMethods[0].instances
  set_fact:
    updated_app_config: >-
      {{
        app_config_yaml | combine({
          'argocd': app_config_yaml.argocd | combine({
            'appLocatorMethods': [
              app_config_yaml.argocd.appLocatorMethods[0] | combine({
                'instances': app_config_yaml.argocd.appLocatorMethods[0].instances + [{
                  'name': 'cluster-argocd',
                  'url': '${CLUSTER_ARGOCD_URL}',
                  'username': 'admin',
                  'password': '${CLUSTER_ARGOCD_PASSWORD}'
                }]
              })
            ] + (app_config_yaml.argocd.appLocatorMethods[1:] | default([]))
          })
        }, recursive=True)
      }}

- name: Patch tssc-developer-hub-app-config ConfigMap with new ArgoCD instance
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: tssc-developer-hub-app-config
        namespace: tssc-dh
      data:
        app-config.tssc.yaml: "{{ updated_app_config | to_nice_yaml }}"
